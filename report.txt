Lorenzo Bolls
505-997-448
Project 2


Goblin Movement Function:
The name of the recursive goblin movement function is "pathExistsToPlayer" and it is implemented in the file "Temple.cpp".


High-level Description of Goblin Movement Function:
The "pathExistsToPlayer" function determines the best path for a goblin to move towards the player. It passes in an integer grid of the same size as the templeGrid initialized to all 1s. When it the goblin moves onto a position, it will change the coordinate it moves onto to 0 to indicate it has already moved there.  It uses recursion to explore potential paths in all four directions (east, south, west, and north) from the goblin's current position, while decrementing the number of steps available. It checks if each new position is valid and whether it gets closer to the player. The function aims to find the shortest path to the player within the goblin's smell distance. It will be passed to another function called “determineBestDirectionForGoblin” to determine where it should move.


High-level Description of Level Generation with Rooms Connected by Corridors:
The level generation function creates a temple with multiple rooms and corridors connecting them. The process starts by filling the entire grid with walls ('#'). A random number of rooms (between 3 and 7) are generated. Each room's position and size are determined randomly, and the function ensures no overlapping occurs by checking the surrounding grid cells. Once rooms are placed, corridors are generated to connect them. The corridors are created by moving vertically and horizontally from the center of one room to the center of the next, ensuring continuous pathways.


Inefficiencies: 
1. My Goblin recursion function makes it so that it moves away from the player instead towards it. It does work recursively, however, there was some flaw in logic within the recursive call. I had an alternative function in which I would have the goblin use the same movement as BogeyMan and SnakeWoman, but I wanted to submit my recursive callsMemory leaks due to improper deallocation.